from scapy.all import *
from pyrad.packet import Packet
from pyrad.dictionary import Dictionary
import hashlib

# Function to generate MD5 collision
def generate_md5_collision(msg1, msg2, secret):
    md5_msg1 = hashlib.md5(msg1 + secret).digest()
    md5_msg2 = hashlib.md5(msg2 + secret).digest()
    return md5_msg1 == md5_msg2

# Function to create a new RADIUS packet
def create_radius_packet(src_ip, dst_ip, sport, dport, response_type, request_packet, secret):
    radius_packet = Packet(secret=secret)
    radius_packet.code = response_type
    radius_packet.id = request_packet.id
    radius_packet.authenticator = request_packet.authenticator

    for attr in request_packet.keys():
        if attr not in ['User-Password', 'CHAP-Password']:
            radius_packet.AddAttribute(attr, request_packet[attr][0])

    raw_data = radius_packet.ReplyPacket()
    return IP(src=src_ip, dst=dst_ip) / UDP(sport=sport, dport=dport) / Raw(load=raw_data)

# Packet capture and analysis function
def radius_packet_callback(packet, secret, dictionary_path):
    if packet.haslayer(UDP) and packet[UDP].dport == 1812:
        radius_data = packet[Raw].load
        # Capture and analyze RADIUS Access-Request packets
        try:
            request_packet = Packet(secret=secret, dict=Dictionary(dictionary_path))
            request_packet.DecodePacket(radius_data)

            if request_packet.code == 1:  # Access-Request
                print("Access-Request packet captured.")

                # Create new Access-Reject and Access-Accept packets
                reject_packet = create_radius_packet(packet[IP].dst, packet[IP].src, packet[UDP].dport, packet[UDP].sport, 3, request_packet, secret)
                accept_packet = create_radius_packet(packet[IP].dst, packet[IP].src, packet[UDP].dport, packet[UDP].sport, 2, request_packet, secret)

                # Check for MD5 collision
                if generate_md5_collision(reject_packet[Raw].load, accept_packet[Raw].load, secret):
                    print("MD5 collision detected. Your system may be vulnerable.")
                else:
                    print("No MD5 collision detected. Your system appears secure.")
        except Exception as e:
            print(f"Packet processing error: {e}")

# Main function to start the packet sniffing
def main():
    # Get user inputs
    secret = input("Enter the shared secret: ").encode()
    iface = input("Enter the network interface (e.g., eth0): ")
    dictionary_path = input("Enter the path to your RADIUS dictionary: ")

    # Start packet sniffing
    sniff(iface=iface, prn=lambda x: radius_packet_callback(x, secret, dictionary_path), filter='udp port 1812', store=0)

if __name__ == "__main__":
    main()
